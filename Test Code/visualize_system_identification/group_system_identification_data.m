function group_system_identification_data

tic
bins            = [1 4 8 14 30 50 75 100 150 200];
layers          = [1 8; 2 7; 3 6; 4 5];
channels        = [2 4 6 8 9 11 13 15];
results_home    = '/Users/mconnolly/Dropbox/Grid_search_data/';

data_files  = {'ARN038_Grid_Search_MainDataTank_Block-50' ...
    'ARN038_Grid_Search_MainDataTank_Block-53' ...
    'ARN038_Grid_Search_MainDataTank_Block-55' ...
    'ARN038_Grid_Search_MainDataTank_Block-57' ...
    'ARN038_Grid_Search_MainDataTank_Block-59' ...
    'ARN038_Grid_Search_MainDataTank_Block-61' ...
    'ARN038_Grid_Search_MainDataTank_Block-63' ...
    'ARN038_Grid_Search_MainDataTank_Block-64' ...
    };

spectral_metrics            = [];
spectral_baseline           = [];
coherence_metrics           = [];
coherence_baseline          = [];
correlation_metrics         = [];
correlation_baseline        = [];
mutual_information_metrics  = [];
mutual_information_baseline = [];
channel_parameters          = [];
layer_parameters            = [];
segment_duration            = 1;
% Extract data 
for c1 = 1:size(data_files,2)
    
    % Pull segments from trial
    [data_matrix_pre, data_matrix_post, parameter_matrix] = ...
        extract_stimulation([results_home data_files{c1}],...
        [results_home data_files{c1} '/' data_files{c1} '.mat'],segment_duration,'matrix');
    
    [baseline_matrix_pre, baseline_matrix_post] = ...
        extract_baseline([results_home data_files{c1}],...
        [results_home data_files{c1} '/' data_files{c1} '.mat'],segment_duration,'matrix');
     
    % Normalize segments
    [data_matrix_pre, data_matrix_post] = ...
        normalize_stimulation_data(data_matrix_pre, data_matrix_post);  
    
    [baseline_matrix_pre, baseline_matrix_post] = ...
        normalize_stimulation_data(baseline_matrix_pre, baseline_matrix_post); 
    
    % Calculate spectral metrics
    spectral_metrics            = [spectral_metrics;  ...
                                generate_spectral_metrics(data_matrix_pre, ...
                                data_matrix_post, bins)];
    
    spectral_baseline           = [spectral_baseline;  ...
                                generate_spectral_metrics(baseline_matrix_pre, ...
                                baseline_matrix_post, bins)];
     
    % Calculate coherence metrics
    coherence_metrics           = [coherence_metrics; ...
                                generate_coherence_metrics(data_matrix_pre,...
                                data_matrix_post, bins, layers)];
                            
    coherence_baseline          = [coherence_baseline; ...
                                generate_coherence_metrics(baseline_matrix_pre,...
                                baseline_matrix_post, bins, layers)];

    % Calculate correlation metrics
    correlation_metrics         = [correlation_metrics; ...
                                generate_correlation_metrics(data_matrix_pre, ...
                                data_matrix_post, layers)];

    correlation_baseline        = [correlation_baseline; ...
                                generate_correlation_metrics(baseline_matrix_pre, ...
                                baseline_matrix_post, layers)];
                            
    % Calculate mutual information metrics                        
    mutual_information_metrics  = [mutual_information_metrics; ...
                                generate_mutual_information_metrics(data_matrix_pre, ...
                                data_matrix_post, layers)];

    mutual_information_baseline = [mutual_information_baseline; ...
                                generate_mutual_information_metrics(baseline_matrix_pre, ...
                                baseline_matrix_post, layers)];       
                            
    % Organize parameters                         
    channel_parameters          = [channel_parameters; ...
                                generate_channel_parameters(parameter_matrix,channels)];
                            
    layer_parameters            = [layer_parameters; ...
                                generate_layer_parameters(parameter_matrix,layers)];
end

save('temp_results/UG3_preliminary_system_id.mat', 'spectral_metrics', 'coherence_metrics', ...
    'correlation_metrics', 'mutual_information_metrics', 'spectral_baseline', 'coherence_baseline', ...
    'correlation_baseline', 'mutual_information_baseline', 'channel_parameters', 'layer_parameters')

end           